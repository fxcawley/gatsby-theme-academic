{"version":3,"file":"component---gatsby-theme-academic-src-templates-tags-index-jsx-afa6f27f6457feb2b74d.js","mappings":"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","sources":["webpack://example/../node_modules/antd/es/_util/colors.js","webpack://example/../node_modules/rc-util/es/Dom/canUseDom.js","webpack://example/../node_modules/rc-util/es/Dom/findDOMNode.js","webpack://example/../node_modules/rc-util/es/raf.js","webpack://example/../gatsby-theme-academic/node_modules/lodash/_baseFilter.js","webpack://example/../gatsby-theme-academic/node_modules/lodash/filter.js","webpack://example/../gatsby-theme-academic/src/components/PostCard/index.jsx","webpack://example/../gatsby-theme-academic/src/components/PostCard/postCard.module.less","webpack://example/../gatsby-theme-academic/src/templates/tags/index.jsx"],"sourcesContent":["import { tuple } from './type';\nexport var PresetStatusColorTypes = tuple('success', 'processing', 'error', 'default', 'warning'); // eslint-disable-next-line import/prefer-default-export\n\nexport var PresetColorTypes = tuple('pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime');","export default function canUseDom() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}","import ReactDOM from 'react-dom';\n/**\n * Return if a node is a DOM node. Else will return by `findDOMNode`\n */\n\nexport default function findDOMNode(node) {\n  if (node instanceof HTMLElement) {\n    return node;\n  }\n\n  return ReactDOM.findDOMNode(node);\n}","var raf = function raf(callback) {\n  return +setTimeout(callback, 16);\n};\n\nvar caf = function caf(num) {\n  return clearTimeout(num);\n};\n\nif (typeof window !== 'undefined' && 'requestAnimationFrame' in window) {\n  raf = function raf(callback) {\n    return window.requestAnimationFrame(callback);\n  };\n\n  caf = function caf(handle) {\n    return window.cancelAnimationFrame(handle);\n  };\n}\n\nexport default function wrapperRaf(callback) {\n  return raf(callback);\n}\nwrapperRaf.cancel = caf;","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","import React from 'react';\n// import moment from 'moment';\n// import { Link } from 'gatsby';\nimport {\n  Row, Card,\n} from 'antd';\n// import { navigate } from '@reach/router';\nimport Img from 'gatsby-image';\n\nimport classnames from 'classnames';\nimport * as style from './postCard.module.less';\nimport PostTag from '../PostTag';\nimport Utils from '../../utils/pageUtils';\nimport { useSiteMetadata } from '../../utils/hooks';\n\nconst PostCard = (props) => {\n  const { data: { node }, tagsMap } = props;\n  const {\n    frontmatter: {\n      title, excerpt, path, date, tags, cover,\n    },\n  } = node;\n  const fluid = cover ? cover.childImageSharp.fluid : null;\n  const siteMetadata = useSiteMetadata();\n  const url = Utils.resolvePageUrl(path);\n  // const handleClick = (e) => {\n  //   if (e.target.tagName.toLowerCase() !== 'a' && url) {\n  //     window.location.href = Utils.generateFullUrl(siteMetadata, url);\n  //     // navigate(url);\n  //   }\n  // };\n\n  const excerptHTML = Utils.parseMarkDown(Utils.trimExcerpt(excerpt), true);\n\n  return (\n    <Card\n      className={classnames(style.postCard, 'cursor-default')}\n      bodyStyle={{ padding: '0.8rem' }}\n      hoverable\n      cover={(\n        <div>\n          <a href={Utils.generateFullUrl(siteMetadata, url)}>\n            { fluid ? <Img fluid={fluid} /> : <div className={style.postCardImg} />}\n          </a>\n          <span className={style.dateHolder}>\n            {date ? Utils.formatDate(date) : ''}\n          </span>\n        </div>\n      )}\n      // onClick={handleClick}\n    >\n      <Card.Meta\n        title={(\n          <span className={style.title}>\n            <a href={Utils.generateFullUrl(siteMetadata, url)}>{title}</a>\n          </span>\n        )}\n        style={{ marginBottom: '1rem' }}\n      />\n      <Row align=\"middle\" gutter={[0, 8]}>\n        { tags ? tags.map((tag) => (tagsMap[tag] ? <PostTag tag={tagsMap[tag]} /> : null)) : null}\n      </Row>\n      <a href={Utils.generateFullUrl(siteMetadata, url)}>\n        <p style={{ marginTop: '1rem' }} dangerouslySetInnerHTML={{ __html: excerptHTML }} />\n      </a>\n    </Card>\n  );\n};\n\nexport default PostCard;\n","// extracted by mini-css-extract-plugin\nexport var postCard = \"postCard-module--postCard--2daM1\";\nexport var postCardImg = \"postCard-module--postCardImg--3L6nd\";\nexport var dateHolder = \"postCard-module--dateHolder--xmc-b\";\nexport var title = \"postCard-module--title--2FDrU\";","/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n// import Img from 'gatsby-image';\nimport {\n  Layout, Row, Col,\n} from 'antd';\n/* App imports */\nimport _ from 'lodash';\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\n// import Statistics from '../../../content/statistics.json';\nimport Utils from '../../utils/pageUtils';\nimport * as style from './tags.module.less';\nimport ResearchCard from '../../components/ResearchCard';\n\nconst TagPage = ({\n  data,\n  pageContext,\n}) => {\n  const tagName = pageContext.tag;\n  // const { tag } = pageContext;\n  // const tagName = Statistics.tags[tag].name || tag;\n  // const tagPagePath = siteMetadata.pages.tags;\n  // const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag).node\n  //   .childImageSharp.fluid;\n  const docs = data.allMdx.edges;\n  const posts = _.filter(docs, (doc) => doc.node.fields.slug.type === 'posts');\n  const research = _.filter(docs, (doc) => doc.node.fields.slug.type === 'research');\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\n\n  const tag = tagsMap[tagName];\n  const tagPagePath = tag ? tag.path : '#';\n  const tagDescription = tag ? tag.description : '';\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All post about ${tagName}. ${tagDescription} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1 className=\"titleSeparate\">\n              #\n              {tagName}\n            </h1>\n            {/* <div className={style.bannerImgContainer}> */}\n            {/*  <Img className={style.bannerImg} fluid={tagImage} alt={tagName} /> */}\n            {/* </div> */}\n            <h4 className=\"textCenter\">\n              {tagDescription}\n            </h4>\n          </div>\n          {research.length > 0 ? [\n            <h2>Research</h2>,\n            <Row gutter={[20, 20]}>\n              {research.map((post, key) => (\n                // eslint-disable-next-line react/no-array-index-key\n                <Col key={key} xs={24} sm={24} md={24} lg={24}>\n                  <ResearchCard data={post} tagsMap={tagsMap} />\n                </Col>\n              ))}\n            </Row>,\n          ] : null}\n          {posts.length > 0 ? [\n            <h2>Posts</h2>,\n            <Row gutter={[20, 20]}>\n              {posts.map((post, key) => (\n                // eslint-disable-next-line react/no-array-index-key\n                <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                  <PostCard data={post} tagsMap={tagsMap} />\n                </Col>\n              ))}\n            </Row>,\n          ] : null}\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allTag: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string.isRequired,\n          path: PropTypes.string.isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n    allMdx: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allTag {\n      edges {\n        node {\n          color\n          name\n          description\n          path\n        }\n      }\n    }\n    allMdx(\n      filter: {\n        fields: { slug: { tags: { in: [$tag] } } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 320, maxHeight: 180, fit: CONTAIN, background: \"rgba(0,0,0,0)\") {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n            date\n            venue\n            authors\n            path\n            title\n            tags\n            excerpt\n            type\n          }\n          fields {\n            slug {\n              links {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n"],"names":["PresetStatusColorTypes","PresetColorTypes","canUseDom","window","document","createElement","findDOMNode","node","HTMLElement","raf","callback","setTimeout","caf","num","clearTimeout","wrapperRaf","requestAnimationFrame","handle","cancelAnimationFrame","cancel","baseEach","require","module","exports","collection","predicate","result","value","index","push","arrayFilter","baseFilter","baseIteratee","isArray","props","data","tagsMap","frontmatter","title","excerpt","path","date","tags","cover","fluid","childImageSharp","siteMetadata","useSiteMetadata","url","Utils","excerptHTML","className","classnames","bodyStyle","padding","hoverable","href","style","marginBottom","align","gutter","map","tag","PostTag","marginTop","dangerouslySetInnerHTML","__html","tagName","pageContext","docs","allMdx","edges","posts","doc","fields","slug","type","research","allTag","name","tagPagePath","tagDescription","description","Header","keywords","Sidebar","length","post","key","xs","sm","md","lg","ResearchCard","PostCard"],"sourceRoot":""}