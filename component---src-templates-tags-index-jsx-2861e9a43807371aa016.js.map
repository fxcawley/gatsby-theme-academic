{"version":3,"sources":["webpack:///./src/templates/tags/index.jsx","webpack:///./src/templates/tags/tags.module.less","webpack:///./node_modules/lodash/filter.js","webpack:///./node_modules/lodash/_baseFilter.js"],"names":["pageQuery","TagPage","data","tagName","pageContext","tag","docs","allMarkdownRemark","edges","posts","doc","node","fields","parsed","type","research","tags","allTag","tagsMap","name","tagPagePath","path","tagDescription","description","className","title","Utils","resolvePageUrl","keywords","style","tagsList","length","gutter","map","post","key","xs","sm","md","lg","module","exports","arrayFilter","baseFilter","baseIteratee","isArray","collection","predicate","baseEach","result","value","index","push"],"mappings":"mZAwHaA,EAAS,aAmEPC,UAtKC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACXC,EADmC,EAAlBC,YACKC,IAMtBC,EAAOJ,EAAKK,kBAAkBC,MAC9BC,EAAQ,IAASH,GAAM,SAACI,GAAD,MAAyC,UAAhCA,EAAIC,KAAKC,OAAOC,OAAOC,QACvDC,EAAW,IAAST,GAAM,SAACI,GAAD,MAAyC,aAAhCA,EAAIC,KAAKC,OAAOC,OAAOC,QAC1DE,EAAOd,EAAKe,OAASf,EAAKe,OAAOT,MAAQ,GACzCU,EAAU,IAAY,IAAQF,GAAM,SAACX,GAAD,OAASA,EAAIM,KAAKQ,QAAO,QAE7Dd,EAAMa,EAAQf,GACdiB,EAAcf,EAAMA,EAAIgB,KAAO,IAC/BC,EAAiBjB,EAAMA,EAAIkB,YAAc,GAE/C,OACE,uBAAQC,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,MAAOtB,EACPoB,YAAW,kBAAoBpB,EAApB,KAAgCmB,EAAhC,IACXD,KAAMK,IAAMC,eAAeP,EAAaf,GACxCuB,SAAU,CAACzB,KAEb,kBAAC,IAAD,KACE,yBAAKqB,UAAS,kBAAoBK,IAAMC,UACtC,wBAAIN,UAAU,iBAAd,IAEGrB,GAKH,wBAAIqB,UAAU,cACXF,IAGHP,EAASgB,OAAS,EAAI,CACtB,wCACA,uBAAKC,OAAQ,CAAC,GAAI,KACfjB,EAASkB,KAAI,SAACC,EAAMC,GAAP,OAEZ,uBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACzC,kBAAC,IAAD,CAAcrC,KAAMgC,EAAMhB,QAASA,UAIvC,KACFT,EAAMsB,OAAS,EAAI,CACnB,qCACA,uBAAKC,OAAQ,CAAC,GAAI,KACfvB,EAAMwB,KAAI,SAACC,EAAMC,GAAP,OAET,uBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,kBAAC,IAAD,CAAUrC,KAAMgC,EAAMhB,QAASA,UAInC,U,qBCjFdsB,EAAOC,QAAU,CAAC,SAAW,+BAA+B,mBAAqB,yCAAyC,UAAY,kC,qBCDtI,IAAIC,EAAc,EAAQ,QACtBC,EAAa,EAAQ,QACrBC,EAAe,EAAQ,QACvBC,EAAU,EAAQ,QAgDtBL,EAAOC,QALP,SAAgBK,EAAYC,GAE1B,OADWF,EAAQC,GAAcJ,EAAcC,GACnCG,EAAYF,EAAaG,EAAW,M,qBChDlD,IAAIC,EAAW,EAAQ,QAoBvBR,EAAOC,QAVP,SAAoBK,EAAYC,GAC9B,IAAIE,EAAS,GAMb,OALAD,EAASF,GAAY,SAASI,EAAOC,EAAOL,GACtCC,EAAUG,EAAOC,EAAOL,IAC1BG,EAAOG,KAAKF,MAGTD","file":"component---src-templates-tags-index-jsx-2861e9a43807371aa016.js","sourcesContent":["/* eslint-disable react/forbid-prop-types */\n/* Vendor imports */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n// import Img from 'gatsby-image';\nimport {\n  Layout, Row, Col,\n} from 'antd';\n/* App imports */\nimport _ from 'lodash';\nimport SEO from '../../components/Seo';\nimport Header from '../../components/PageLayout/Header';\nimport PostCard from '../../components/PostCard';\nimport SidebarWrapper from '../../components/PageLayout/Sidebar';\n// import Config from '../../../config';\n// import Statistics from '../../../content/statistics.json';\nimport Utils from '../../utils/pageUtils';\nimport style from './tags.module.less';\nimport ResearchCard from '../../components/ResearchCard';\n\nconst TagPage = ({ data, pageContext }) => {\n  const tagName = pageContext.tag;\n  // const { tag } = pageContext;\n  // const tagName = Statistics.tags[tag].name || tag;\n  // const tagPagePath = Config.pages.tags;\n  // const tagImage = data.allFile.edges.find((edge) => edge.node.name === tag).node\n  //   .childImageSharp.fluid;\n  const docs = data.allMarkdownRemark.edges;\n  const posts = _.filter(docs, (doc) => doc.node.fields.parsed.type === 'posts');\n  const research = _.filter(docs, (doc) => doc.node.fields.parsed.type === 'research');\n  const tags = data.allTag ? data.allTag.edges : [];\n  const tagsMap = _.mapValues(_.keyBy(tags, (tag) => tag.node.name), 'node');\n\n  const tag = tagsMap[tagName];\n  const tagPagePath = tag ? tag.path : '#';\n  const tagDescription = tag ? tag.description : '';\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`All post about ${tagName}. ${tagDescription} `}\n          path={Utils.resolvePageUrl(tagPagePath, tag)}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1 className=\"titleSeparate\">\n              #\n              {tagName}\n            </h1>\n            {/* <div className={style.bannerImgContainer}> */}\n            {/*  <Img className={style.bannerImg} fluid={tagImage} alt={tagName} /> */}\n            {/* </div> */}\n            <h4 className=\"textCenter\">\n              {tagDescription}\n            </h4>\n          </div>\n          { research.length > 0 ? [\n            <h2>Research</h2>,\n            <Row gutter={[20, 20]}>\n              {research.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n                <Col key={key} xs={24} sm={24} md={24} lg={24}>\n                  <ResearchCard data={post} tagsMap={tagsMap} />\n                </Col>\n              ))}\n            </Row>,\n          ] : null }\n          { posts.length > 0 ? [\n            <h2>Posts</h2>,\n            <Row gutter={[20, 20]}>\n              {posts.map((post, key) => (\n                // eslint-disable-next-line react/no-array-index-key\n                <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                  <PostCard data={post} tagsMap={tagsMap} />\n                </Col>\n              ))}\n            </Row>,\n          ] : null }\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  );\n};\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allTag: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string.isRequired,\n          path: PropTypes.string.isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }),\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allTag {\n      edges {\n        node {\n          color\n          name\n          description\n          path\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        fields: { parsed: { tags: { in: [$tag] } } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n          fields {\n            parsed {\n              date\n              venue\n              authors {\n                name\n                url\n              }\n              path\n              title\n              tags\n              excerpt\n              type\n              links {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default TagPage;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n"],"sourceRoot":""}